/* tslint:disable:no-console */
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const benchmark_1 = require("benchmark");
const _ = require("lodash");
const rxjs_1 = require("rxjs");
const iterate_1 = require("../iterate");
const suite = new benchmark_1.Suite();
// Simulate iterating over a very lage Set of strings and applying a filter and a map on it
const hugeSet = new Set();
for (let i = 0; i < 10000; i++) {
    hugeSet.add('file:///foo/bar/' + i);
}
suite.add('Loop', () => {
    const result = new Set();
    for (const uri of hugeSet) {
        if (!uri.startsWith('file://')) {
            continue;
        }
        result.add(uri.substr('file:///'.length));
    }
});
suite.add('iterare', () => {
    iterate_1.iterate(hugeSet)
        .filter(uri => uri.startsWith('file://'))
        .map(uri => uri.substr('file:///'.length))
        .toSet();
});
suite.add('Array method chain', () => {
    return new Set(Array.from(hugeSet)
        .filter(uri => uri.startsWith('file://'))
        .map(uri => uri.substr('file:///'.length)));
});
suite.add('Lodash', () => {
    // Need to convert to Array first, because lodash does not support Sets
    // This uses lodash's lazy evaluation feature
    return new Set(_(Array.from(hugeSet))
        .filter((uri) => uri.startsWith('file://'))
        .map(uri => uri.substr('file:///'.length))
        .value());
});
suite.add('RxJS', (deferred) => {
    rxjs_1.Observable.from(Array.from(hugeSet))
        .filter((uri) => uri.startsWith('file://'))
        .map(uri => uri.substr('file:///'.length))
        .toArray()
        .map(arr => new Set(arr))
        .subscribe(result => {
        deferred.resolve();
    });
}, { defer: true });
suite.on('cycle', (event) => {
    console.log(String(event.target));
});
suite.on('complete', function () {
    console.log('Fastest is ' + this.filter('fastest').map('name'));
});
suite.run({ async: true });
//# sourceMappingURL=map_filter.1.js.map