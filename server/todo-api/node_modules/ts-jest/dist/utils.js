"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var fs = require("fs");
var jest_config_1 = require("jest-config");
var setFromArgv = require("jest-config/build/set_from_argv");
var path = require("path");
var tsc = require("typescript");
function parseConfig(argv) {
    if (argv.config && typeof argv.config === 'string') {
        if (argv.config[0] === '{' && argv.config[argv.config.length - 1] === '}') {
            return JSON.parse(argv.config);
        }
    }
    return argv.config;
}
function loadJestConfigFromFile(filePath, argv) {
    var config = JSON.parse(fs.readFileSync(filePath, 'utf-8'));
    config.rootDir = config.rootDir
        ? path.resolve(path.dirname(filePath), config.rootDir)
        : process.cwd();
    return jest_config_1.normalize(config, argv);
}
function loadJestConfigFromPackage(filePath, argv) {
    var R_OK = (fs.constants && fs.constants.R_OK) || fs['R_OK'];
    try {
        fs.accessSync(filePath, R_OK);
    }
    catch (e) {
        return null;
    }
    var packageData = require(filePath);
    var config = packageData.jest || {};
    var root = path.dirname(filePath);
    config.rootDir = config.rootDir ? path.resolve(root, config.rootDir) : root;
    return jest_config_1.normalize(config, argv);
}
function readRawConfig(argv, root) {
    var rawConfig = parseConfig(argv);
    if (typeof rawConfig === 'string') {
        return loadJestConfigFromFile(path.resolve(process.cwd(), rawConfig), argv);
    }
    if (typeof rawConfig === 'object') {
        var config = Object.assign({}, rawConfig);
        config.rootDir = config.rootDir || root;
        return jest_config_1.normalize(config, argv);
    }
    var packageConfig = loadJestConfigFromPackage(path.join(root, 'package.json'), argv);
    return packageConfig || jest_config_1.normalize({ rootDir: root }, argv);
}
function getJestConfig(root) {
    var yargs = require('yargs');
    var argv = yargs(process.argv.slice(2)).argv;
    var rawConfig = readRawConfig(argv, root);
    return Object.freeze(setFromArgv.default(rawConfig, argv));
}
exports.getJestConfig = getJestConfig;
function getTSJestConfig(globals) {
    return globals && globals['ts-jest'] ? globals['ts-jest'] : {};
}
exports.getTSJestConfig = getTSJestConfig;
function formatTscParserErrors(errors) {
    return errors.map(function (s) { return JSON.stringify(s, null, 4); }).join('\n');
}
function readCompilerOptions(configPath) {
    var loaded = tsc.readConfigFile(configPath, function (file) {
        var read = tsc.sys.readFile(file);
        if (!read) {
            throw new Error("ENOENT: no such file or directory, open '" + configPath + "'");
        }
        return read;
    });
    if (loaded.error) {
        throw new Error(JSON.stringify(loaded.error, null, 4));
    }
    var basePath = path.dirname(configPath);
    var parsedConfig = tsc.parseJsonConfigFileContent(loaded.config, tsc.sys, basePath);
    if (parsedConfig.errors.length > 0) {
        var formattedErrors = formatTscParserErrors(parsedConfig.errors);
        throw new Error("Some errors occurred while attempting to read from " + configPath + ": " + formattedErrors);
    }
    return parsedConfig.options;
}
function getStartDir() {
    var grandparent = path.resolve(__dirname, '..', '..');
    if (grandparent.endsWith('/node_modules')) {
        return process.cwd();
    }
    return '.';
}
function getPathToClosestTSConfig(startDir, previousDir) {
    if (!startDir) {
        return getPathToClosestTSConfig(getStartDir());
    }
    var tsConfigPath = path.join(startDir, 'tsconfig.json');
    var startDirPath = path.resolve(startDir);
    var previousDirPath = path.resolve(previousDir || '/');
    if (startDirPath === previousDirPath || fs.existsSync(tsConfigPath)) {
        return tsConfigPath;
    }
    return getPathToClosestTSConfig(path.join(startDir, '..'), startDir);
}
function getTSConfigOptionFromConfig(globals) {
    var defaultTSConfigFile = getPathToClosestTSConfig();
    if (!globals) {
        return defaultTSConfigFile;
    }
    var tsJestConfig = getTSJestConfig(globals);
    if (globals.__TS_CONFIG__) {
        console.warn("Using globals > __TS_CONFIG__ option for setting TS config is deprecated.\nPlease set config using this option:\nglobals > ts-jest > tsConfigFile (string).\nMore information at https://github.com/kulshekhar/ts-jest#tsconfig");
        return globals.__TS_CONFIG__;
    }
    else if (tsJestConfig.tsConfigFile) {
        return tsJestConfig.tsConfigFile;
    }
    return defaultTSConfigFile;
}
exports.getTSConfigOptionFromConfig = getTSConfigOptionFromConfig;
function mockGlobalTSConfigSchema(globals) {
    var config = getTSConfigOptionFromConfig(globals);
    return typeof config === 'string'
        ? { 'ts-jest': { tsConfigFile: config } }
        : { __TS_CONFIG__: config };
}
exports.mockGlobalTSConfigSchema = mockGlobalTSConfigSchema;
var tsConfigCache = {};
function getTSConfig(globals, collectCoverage) {
    if (collectCoverage === void 0) { collectCoverage = false; }
    var config = getTSConfigOptionFromConfig(globals);
    var skipBabel = getTSJestConfig(globals).skipBabel;
    var isReferencedExternalFile = typeof config === 'string';
    var tsConfigCacheKey = JSON.stringify([
        skipBabel,
        collectCoverage,
        isReferencedExternalFile ? config : undefined,
    ]);
    if (tsConfigCacheKey in tsConfigCache) {
        return tsConfigCache[tsConfigCacheKey];
    }
    if (isReferencedExternalFile) {
        var configFileName = config;
        var configPath = path.resolve(config);
        config = readCompilerOptions(configPath);
        if (configFileName === path.join(getStartDir(), 'tsconfig.json')) {
            config.module = tsc.ModuleKind.CommonJS;
        }
    }
    delete config.sourceMap;
    config.inlineSourceMap = true;
    config.inlineSources = true;
    delete config.outDir;
    var result;
    if (isReferencedExternalFile) {
        config.jsx = config.jsx || tsc.JsxEmit.React;
        config.module = config.module || tsc.ModuleKind.CommonJS;
        if (config.allowSyntheticDefaultImports && !skipBabel) {
            config.module = tsc.ModuleKind.ES2015;
        }
        result = config;
    }
    else {
        config.jsx = config.jsx || 'react';
        config.module = config.module || 'commonjs';
        if (config.allowSyntheticDefaultImports && !skipBabel) {
            config.module = 'es2015';
        }
        var converted = tsc.convertCompilerOptionsFromJson(config, undefined);
        if (converted.errors && converted.errors.length > 0) {
            var formattedErrors = formatTscParserErrors(converted.errors);
            throw new Error("Some errors occurred while attempting to convert " + JSON.stringify(config) + ": " + formattedErrors);
        }
        result = converted.options;
    }
    tsConfigCache[tsConfigCacheKey] = result;
    return result;
}
exports.getTSConfig = getTSConfig;
//# sourceMappingURL=data:application/json;base64,